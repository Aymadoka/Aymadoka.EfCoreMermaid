// <auto-generated />
using System;
using Erp.Mdm.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Erp.Mdm.Migrations
{
    [DbContext(typeof(MdmDbContext))]
    partial class MdmDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("Abp_Editions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Edition");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("Abp_Features");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ReturnValue");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("Abp_AuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsGranted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("Abp_Permissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("Abp_RoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<long?>("UserLinkId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("Abp_UserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("Abp_UserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("Abp_UserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<byte>("Result");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("Abp_UserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("Abp_UserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("Abp_UserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("Abp_UserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsAbandoned");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime");

                    b.Property<DateTime>("NextTryTime");

                    b.Property<byte>("Priority");

                    b.Property<short>("TryCount");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("Abp_BackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name", "UserId")
                        .IsUnique();

                    b.ToTable("Abp_Settings");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ChangeTime");

                    b.Property<byte>("ChangeType");

                    b.Property<long>("EntityChangeSetId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("Abp_EntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("ExtensionData");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("Reason")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("Abp_EntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("EntityChangeId");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("Abp_EntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.IdentityServer4.PersistedGrantEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("Ids_PersistedGrants");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("Abp_Languages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("Abp_LanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("Abp_Notifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("Abp_NotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Abp_TenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("TenantNotificationId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("Abp_UserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("Abp_OrganizationUnits");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnitRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "RoleId");

                    b.ToTable("Abp_OrganizationUnitRoles");
                });

            modelBuilder.Entity("Erp.Mdm.MessagePartners.Aggregates.PartnerMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(4096);

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<string>("EntityId")
                        .HasMaxLength(36);

                    b.Property<DateTime>("EntityVersion");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime>("LastProcessingTime");

                    b.Property<string>("Md5")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime>("NextPushingTime");

                    b.Property<string>("PartnerId")
                        .HasMaxLength(32);

                    b.Property<int>("PushedCount");

                    b.Property<DateTime>("PushedTime");

                    b.Property<string>("StandardObjectId")
                        .HasMaxLength(32);

                    b.Property<int>("Status");

                    b.Property<string>("SubscribePropertiesString")
                        .HasMaxLength(1024);

                    b.Property<string>("TraceIdentifier")
                        .HasMaxLength(128);

                    b.Property<Guid>("UpstreamMessageId");

                    b.HasKey("Id");

                    b.HasIndex("CreationTime", "Status");

                    b.HasIndex("StandardObjectId", "PartnerId", "EntityId");

                    b.ToTable("Mds_Message_Partner");
                });

            modelBuilder.Entity("Erp.Mdm.MessageSources.Aggregates.SourceMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime>("LastProcessingTime");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CreationTime", "Status");

                    b.ToTable("Mds_Message_Source");
                });

            modelBuilder.Entity("Erp.Mdm.MessageStandards.Aggregates.StandardMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(4096);

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<string>("EntityId")
                        .HasMaxLength(36);

                    b.Property<DateTime>("EntityVersion");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime>("LastProcessingTime");

                    b.Property<string>("Md5")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("StandardObjectId")
                        .HasMaxLength(32);

                    b.Property<int>("Status");

                    b.Property<string>("TraceIdentifier")
                        .HasMaxLength(128);

                    b.Property<Guid>("UpstreamMessageId");

                    b.HasKey("Id");

                    b.HasIndex("CreationTime", "Status");

                    b.HasIndex("StandardObjectId", "EntityId")
                        .IsUnique();

                    b.ToTable("Mds_Message_Standard");
                });

            modelBuilder.Entity("Erp.Mdm.MessageSuppliers.Aggregates.SupplierMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime>("LastProcessingTime");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CreationTime", "Status");

                    b.ToTable("Mds_Message_Supplier");
                });

            modelBuilder.Entity("Erp.Mdm.ParserDefiners.Aggregates.SupplierParser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EntityIdKey")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("EntityVersionKey")
                        .HasMaxLength(32);

                    b.Property<string>("FeatureString")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("Order");

                    b.Property<string>("SupplierDataTypeId")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("Mds_Base_SupplierParser");
                });

            modelBuilder.Entity("Erp.Mdm.PartnerDefiners.Aggregates.Partner", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("CallBackUrl")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<string>("ContactMailString")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("Mds_Base_Partner");
                });

            modelBuilder.Entity("Erp.Mdm.PartnerDefiners.Aggregates.PartnerSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("HttpClientType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<bool>("IsSubscribeHistoryVersion");

                    b.Property<bool>("IsTemplate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("PartnerId")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("StandardObjectId")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("SubscribePropertiesString")
                        .HasMaxLength(1024);

                    b.Property<Guid?>("TemplateId");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("Mds_Base_PartnerSubscription");
                });

            modelBuilder.Entity("Erp.Mdm.PartnerDefiners.Aggregates.PartnerSubscriptionTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .HasMaxLength(4096);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Note")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.ToTable("Mds_Base_PartnerSubscriptionTemplate");
                });

            modelBuilder.Entity("Erp.Mdm.StandardDefiners.Aggregates.StandardObject", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4096);

                    b.HasKey("Id");

                    b.ToTable("Mds_Base_StandardObject");
                });

            modelBuilder.Entity("Erp.Mdm.StandardDefiners.Aggregates.StandardProperty", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(65);

                    b.Property<string>("GivenId")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ObjectId")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("ObjectId", "GivenId")
                        .IsUnique();

                    b.ToTable("Mds_Base_StandardProperty");
                });

            modelBuilder.Entity("Erp.Mdm.StandardMapperDefiners.Aggregates.StandardMapper", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(65);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("StandardObjectId")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("Mds_Base_StandardMapper");
                });

            modelBuilder.Entity("Erp.Mdm.StandardMapperDefiners.Aggregates.StandardMapperDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StandardMapperId")
                        .IsRequired()
                        .HasMaxLength(65);

                    b.Property<string>("StandardPropertyKey")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("SupplierPropertyKey")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("StandardMapperId", "StandardPropertyKey")
                        .IsUnique();

                    b.ToTable("Mds_Base_StandardMapperDetail");
                });

            modelBuilder.Entity("Erp.Mdm.SubscribeInitials.Aggregates.DetailTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("MainTaskId");

                    b.Property<Guid>("PagingTaskId");

                    b.Property<string>("PartnerId")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<Guid>("StandardMessageId");

                    b.Property<string>("StandardObjectId")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Mds_Initial_DetailTask");
                });

            modelBuilder.Entity("Erp.Mdm.SubscribeInitials.Aggregates.MainTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime>("MaxEntityVersion");

                    b.Property<string>("PartnerId")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("StandardObjectId")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("Status");

                    b.Property<int>("TaskCount");

                    b.HasKey("Id");

                    b.ToTable("Mds_Initial_MainTask");
                });

            modelBuilder.Entity("Erp.Mdm.SubscribeInitials.Aggregates.PagingTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EndEntityId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("MainTaskId");

                    b.Property<string>("PartnerId")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("StandardObjectId")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("StartEntityId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<int>("Status");

                    b.Property<int>("TaskCount");

                    b.HasKey("Id");

                    b.ToTable("Mds_Initial_PagingTask");
                });

            modelBuilder.Entity("Erp.Mdm.SupplierDefiners.Aggregates.Supplier", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<string>("ContactMailString")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Mds_Base_Supplier");
                });

            modelBuilder.Entity("YH.Platform.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("Abp_Roles");
                });

            modelBuilder.Entity("YH.Platform.CustomDictionaries.Aggregates.Dic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("ConcurrencyStamp")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Base_Dic");
                });

            modelBuilder.Entity("YH.Platform.CustomDictionaries.Aggregates.DicDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DicId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Name")
                        .HasMaxLength(32);

                    b.Property<int>("SequenceNumber");

                    b.Property<string>("Value")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.HasIndex("DicId");

                    b.HasIndex("Key", "DicId")
                        .IsUnique();

                    b.ToTable("Base_DicDetail");
                });

            modelBuilder.Entity("YH.Platform.DataFileObjects.DataFileObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Bytes")
                        .IsRequired();

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Abp_DataFileObject");
                });

            modelBuilder.Entity("YH.Platform.MasterData.MdmBusinessTypes.MdmBusinessType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplySource")
                        .HasMaxLength(16);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool?>("IsEnable");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("ParentBusinessTypeName")
                        .HasMaxLength(255);

                    b.Property<string>("ParentBusinessTypeNo")
                        .HasMaxLength(255);

                    b.Property<string>("RecordTypeApi")
                        .HasMaxLength(255);

                    b.Property<string>("RecordTypeName")
                        .HasMaxLength(255);

                    b.Property<string>("Remark")
                        .HasMaxLength(255);

                    b.Property<DateTime>("SourceLastModificationTime");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Mdm_BusinessTypes");
                });

            modelBuilder.Entity("YH.Platform.MasterData.MdmContacts.MdmContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(255);

                    b.Property<string>("ApplySource")
                        .HasMaxLength(16);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(255);

                    b.Property<string>("CustomerName")
                        .HasMaxLength(255);

                    b.Property<string>("Department")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<string>("Fax")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(255);

                    b.Property<string>("MobilePhone2")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("OwnerName")
                        .HasMaxLength(255);

                    b.Property<string>("OwnerNumber")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasMaxLength(255);

                    b.Property<DateTime>("SourceLastModificationTime");

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Mdm_Contacts");
                });

            modelBuilder.Entity("YH.Platform.MasterData.MdmCorporateEntities.MdmCorporateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(256);

                    b.Property<string>("ApplySource")
                        .HasMaxLength(16);

                    b.Property<string>("Bank")
                        .HasMaxLength(256);

                    b.Property<string>("BankAccountNo")
                        .HasMaxLength(256);

                    b.Property<string>("BaseIso")
                        .HasMaxLength(128);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EasId")
                        .HasMaxLength(64);

                    b.Property<bool>("Enabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .HasMaxLength(128);

                    b.Property<string>("ShortNumber")
                        .HasMaxLength(128);

                    b.Property<string>("SimpleName")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("SourceCreationTime");

                    b.Property<string>("SourceCreator")
                        .HasMaxLength(64);

                    b.Property<DateTime>("SourceLastModificationTime");

                    b.Property<string>("SourceLastUpdater")
                        .HasMaxLength(64);

                    b.Property<string>("TaxNo")
                        .HasMaxLength(128);

                    b.Property<string>("Telephone")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Mdm_CorporateEntities");
                });

            modelBuilder.Entity("YH.Platform.MasterData.MdmCorporateEntityBanks.MdmCorporateEntityBank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplySource")
                        .HasMaxLength(16);

                    b.Property<string>("BankAccountNo")
                        .HasMaxLength(256);

                    b.Property<string>("BankInstitution")
                        .HasMaxLength(256);

                    b.Property<bool>("BasicBank");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("CorporateEntityName")
                        .HasMaxLength(128);

                    b.Property<string>("CorporateEntityNumber")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("CurrencyIso")
                        .HasMaxLength(128);

                    b.Property<string>("CurrencyName")
                        .HasMaxLength(128);

                    b.Property<string>("EasId")
                        .HasMaxLength(64);

                    b.Property<bool>("Enabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("OpeningDate");

                    b.Property<string>("SimpleName")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("SourceCreationTime");

                    b.Property<string>("SourceCreator")
                        .HasMaxLength(64);

                    b.Property<DateTime>("SourceLastModificationTime");

                    b.Property<string>("SourceLastUpdater")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Mdm_CorporateEntityBanks");
                });

            modelBuilder.Entity("YH.Platform.MasterData.MdmCurrencies.MdmCurrency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplySource")
                        .HasMaxLength(16);

                    b.Property<string>("BaseUnit")
                        .HasMaxLength(32);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EasId")
                        .HasMaxLength(64);

                    b.Property<string>("EasNumber")
                        .HasMaxLength(128);

                    b.Property<bool>("Enabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .HasMaxLength(128);

                    b.Property<int>("Precision");

                    b.Property<string>("Sign")
                        .HasMaxLength(32);

                    b.Property<string>("SimpleName")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("SourceCreationTime");

                    b.Property<string>("SourceCreator")
                        .HasMaxLength(64);

                    b.Property<DateTime>("SourceLastModificationTime");

                    b.Property<string>("SourceLastUpdater")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Mdm_Currencies");
                });

            modelBuilder.Entity("YH.Platform.MasterData.MdmCustomers.MdmCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountType")
                        .HasMaxLength(255);

                    b.Property<string>("ApplySource")
                        .HasMaxLength(16);

                    b.Property<string>("BalanceToName")
                        .HasMaxLength(255);

                    b.Property<string>("BalanceToNumber")
                        .HasMaxLength(255);

                    b.Property<string>("BusienessType")
                        .HasMaxLength(255);

                    b.Property<string>("BusienessTypeCode")
                        .HasMaxLength(255);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime?>("CooperationTime");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("CustomerLevel")
                        .HasMaxLength(255);

                    b.Property<string>("EasCode")
                        .HasMaxLength(255);

                    b.Property<string>("EnglishName")
                        .HasMaxLength(255);

                    b.Property<bool>("IsValid");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LostTime");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("OldName")
                        .HasMaxLength(255);

                    b.Property<string>("OperationsAddress")
                        .HasMaxLength(255);

                    b.Property<string>("OwnerName")
                        .HasMaxLength(255);

                    b.Property<string>("OwnerNumber")
                        .HasMaxLength(255);

                    b.Property<string>("ParentName")
                        .HasMaxLength(255);

                    b.Property<string>("ParentNumber")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasMaxLength(255);

                    b.Property<string>("RecordTypeApi")
                        .HasMaxLength(255);

                    b.Property<string>("RecordTypeName")
                        .HasMaxLength(255);

                    b.Property<string>("RegisteredAddress")
                        .HasMaxLength(255);

                    b.Property<string>("ServiceType")
                        .HasMaxLength(255);

                    b.Property<string>("ServiceTypeCode")
                        .HasMaxLength(255);

                    b.Property<string>("SimpleName")
                        .HasMaxLength(255);

                    b.Property<DateTime>("SourceLastModificationTime");

                    b.Property<string>("TaxID")
                        .HasMaxLength(255);

                    b.Property<string>("WorkType")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Mdm_Customers");
                });

            modelBuilder.Entity("YH.Platform.MasterData.MdmEmployeePositions.MdmEmployeePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplySource")
                        .HasMaxLength(16);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("DeptNumber")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime>("EffDate");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime>("LeftDate");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("PersonNumber")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PositionNumber")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime>("SourceLastModificationTime");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Mdm_EmployeePositions");
                });

            modelBuilder.Entity("YH.Platform.MasterData.MdmEmployeeWeiXins.MdmEmployeeWeiXin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplySource")
                        .HasMaxLength(16);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Email")
                        .HasMaxLength(128);

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Mobile")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("NameEn")
                        .HasMaxLength(128);

                    b.Property<string>("OpenId")
                        .HasMaxLength(64);

                    b.Property<DateTime>("SourceLastModificationTime");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Mdm_EmployeeWeiXins");
                });

            modelBuilder.Entity("YH.Platform.MasterData.MdmEmployees.MdmEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdNumber")
                        .HasMaxLength(128);

                    b.Property<string>("ApplySource")
                        .HasMaxLength(16);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("DeptNumber")
                        .HasMaxLength(128);

                    b.Property<string>("Email")
                        .HasMaxLength(128);

                    b.Property<string>("EmpStatus")
                        .HasMaxLength(128);

                    b.Property<DateTime>("EnterDate");

                    b.Property<string>("FID")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LeaveDate");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("PositionNumber")
                        .HasMaxLength(128);

                    b.Property<DateTime>("SourceLastModificationTime");

                    b.Property<string>("Telephone")
                        .HasMaxLength(128);

                    b.Property<string>("WxAvatar")
                        .HasMaxLength(128);

                    b.Property<string>("WxOpenId")
                        .HasMaxLength(128);

                    b.Property<string>("WxWorkUserId")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Mdm_Employees");
                });

            modelBuilder.Entity("YH.Platform.MasterData.MdmExchangeRates.MdmExchangeRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplySource")
                        .HasMaxLength(16);

                    b.Property<DateTime>("AvailTime");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime>("InvalidTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("SourceCurrency")
                        .HasMaxLength(128);

                    b.Property<string>("SourceISO")
                        .HasMaxLength(128);

                    b.Property<DateTime>("SourceLastModificationTime");

                    b.Property<string>("TargetCurrency")
                        .HasMaxLength(128);

                    b.Property<string>("TargetISO")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Mdm_ExchangeRates");
                });

            modelBuilder.Entity("YH.Platform.MasterData.MdmInvoiceAddresses.MdmInvoiceAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(128);

                    b.Property<string>("ApplySource")
                        .HasMaxLength(16);

                    b.Property<string>("BankAccount")
                        .HasMaxLength(128);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(128);

                    b.Property<string>("CustomerName")
                        .HasMaxLength(128);

                    b.Property<string>("DepositBank")
                        .HasMaxLength(128);

                    b.Property<string>("InvoiceTitle")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasMaxLength(128);

                    b.Property<DateTime>("SourceLastModificationTime");

                    b.Property<string>("TaxID")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Mdm_InvoiceAddresses");
                });

            modelBuilder.Entity("YH.Platform.MasterData.MdmOpportunities.MdmOpportunity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionArea")
                        .HasMaxLength(255);

                    b.Property<string>("AdjustCycle")
                        .HasMaxLength(255);

                    b.Property<double?>("AdvanceAmount");

                    b.Property<string>("ApplySource")
                        .HasMaxLength(16);

                    b.Property<string>("AssureType")
                        .HasMaxLength(255);

                    b.Property<string>("BillingCurrency")
                        .HasMaxLength(255);

                    b.Property<string>("BusienessType")
                        .HasMaxLength(255);

                    b.Property<string>("BusienessTypeCode")
                        .HasMaxLength(255);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("CreateInvoiceDate");

                    b.Property<int?>("CreateInvoiceEndDate");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("CreditCurrency")
                        .HasMaxLength(255);

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(255);

                    b.Property<string>("CustomerName")
                        .HasMaxLength(255);

                    b.Property<double?>("CustomerRate");

                    b.Property<DateTime?>("EffectiveDate");

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("FixationRate")
                        .HasMaxLength(255);

                    b.Property<string>("InvoiceType")
                        .HasMaxLength(255);

                    b.Property<string>("IsAdvance")
                        .HasMaxLength(255);

                    b.Property<bool>("IsValid");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MainOpportunityName")
                        .HasMaxLength(255);

                    b.Property<string>("MainOpportunityNumber")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("OwnerName")
                        .HasMaxLength(255);

                    b.Property<string>("OwnerNumber")
                        .HasMaxLength(255);

                    b.Property<int?>("PayDay");

                    b.Property<string>("PayType")
                        .HasMaxLength(255);

                    b.Property<int?>("PaymentBeginDate");

                    b.Property<int?>("PaymentCycle");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(255);

                    b.Property<string>("PeriodValidity")
                        .HasMaxLength(255);

                    b.Property<int?>("ReconciliationEndDate");

                    b.Property<string>("RecordTypeApi")
                        .HasMaxLength(255);

                    b.Property<string>("RecordTypeName")
                        .HasMaxLength(255);

                    b.Property<double?>("RoyaltyRatio");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(255);

                    b.Property<string>("ServiceTypeCode")
                        .HasMaxLength(255);

                    b.Property<string>("SignCompanyCode")
                        .HasMaxLength(255);

                    b.Property<string>("SignText")
                        .HasMaxLength(255);

                    b.Property<DateTime>("SourceLastModificationTime");

                    b.Property<string>("Tax")
                        .HasMaxLength(255);

                    b.Property<int?>("TrustDay");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Mdm_Opportunities");
                });

            modelBuilder.Entity("YH.Platform.MasterData.MdmOpportunitySplits.MdmOpportunitySplit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplySource")
                        .HasMaxLength(16);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("OpportunityCode")
                        .HasMaxLength(255);

                    b.Property<string>("OpportunityName")
                        .HasMaxLength(255);

                    b.Property<DateTime>("SourceLastModificationTime");

                    b.Property<string>("SplitName")
                        .HasMaxLength(255);

                    b.Property<string>("SplitNumber")
                        .HasMaxLength(255);

                    b.Property<double>("SplitPercentage");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Mdm_OpportunitySplits");
                });

            modelBuilder.Entity("YH.Platform.MasterData.MdmOrganizationTypes.MdmOrganizationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplySource")
                        .HasMaxLength(16);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<DateTime>("SourceLastModificationTime");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Mdm_OrganizationTypes");
                });

            modelBuilder.Entity("YH.Platform.MasterData.MdmOrganizations.MdmOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminNumber")
                        .HasMaxLength(128);

                    b.Property<string>("ApplySource")
                        .HasMaxLength(16);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("CompanyNumber")
                        .HasMaxLength(128);

                    b.Property<string>("CostCenterNumber")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(128);

                    b.Property<string>("EnglishName")
                        .HasMaxLength(128);

                    b.Property<bool>("IsAdminOrgUnit");

                    b.Property<bool>("IsAdminSealup");

                    b.Property<bool>("IsCompanyBizUnit");

                    b.Property<bool>("IsCompanyOrgUnit");

                    b.Property<bool>("IsCompanySealup");

                    b.Property<bool>("IsCostCenterBizUnit");

                    b.Property<bool>("IsCostCenterSealup");

                    b.Property<bool>("IsCostOrgUnit");

                    b.Property<bool>("IsLogisticsCostCenter");

                    b.Property<bool>("IsProfitCenterBizUnit");

                    b.Property<bool>("IsProfitCenterSealup");

                    b.Property<bool>("IsProfitCenterUnit");

                    b.Property<bool>("IsPurchaseBizUnit");

                    b.Property<bool>("IsPurchaseOrgUnit");

                    b.Property<bool>("IsPurchaseSealup");

                    b.Property<bool>("IsSaleBizUnit");

                    b.Property<bool>("IsSaleOrgUnit");

                    b.Property<bool>("IsSaleSealup");

                    b.Property<bool>("IsSealup");

                    b.Property<bool>("IsStorageBizUnit");

                    b.Property<bool>("IsStorageOrgUnit");

                    b.Property<bool>("IsStorageSealup");

                    b.Property<bool>("IsYHBusinessEntity");

                    b.Property<bool>("Isleaf");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LayerType")
                        .HasMaxLength(128);

                    b.Property<decimal>("Level")
                        .HasColumnType("decimal(3, 1)");

                    b.Property<string>("LongNumber")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .HasMaxLength(128);

                    b.Property<string>("ProfitCenterNumber")
                        .HasMaxLength(128);

                    b.Property<string>("PurchaseNumber")
                        .HasMaxLength(128);

                    b.Property<string>("SaleNumber")
                        .HasMaxLength(128);

                    b.Property<DateTime>("SourceLastModificationTime");

                    b.Property<string>("StorageNumber")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Mdm_Organizations");
                });

            modelBuilder.Entity("YH.Platform.MasterData.MdmPositions.MdmPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplySource")
                        .HasMaxLength(16);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("DeptNumber")
                        .HasMaxLength(128);

                    b.Property<int>("IsRespPosition");

                    b.Property<int>("IsSealUp");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .HasMaxLength(128);

                    b.Property<string>("ParentId")
                        .HasMaxLength(128);

                    b.Property<DateTime>("SourceLastModificationTime");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Mdm_Positions");
                });

            modelBuilder.Entity("YH.Platform.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DayCount");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("EditionId");

                    b.Property<int>("Gateway");

                    b.Property<string>("InvoiceNo");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("PaymentId");

                    b.Property<int?>("PaymentPeriodType");

                    b.Property<int>("Status");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.HasIndex("PaymentId", "Gateway");

                    b.HasIndex("Status", "CreationTime");

                    b.ToTable("Abp_SubscriptionPayment");
                });

            modelBuilder.Entity("YH.Platform.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<Guid?>("CustomCssId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("EditionId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsInTrialPeriod");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LogoFileType")
                        .HasMaxLength(64);

                    b.Property<Guid?>("LogoId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("SubscriptionEndUtc");

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreationTime");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubscriptionEndUtc");

                    b.HasIndex("TenancyName");

                    b.ToTable("Abp_Tenant");
                });

            modelBuilder.Entity("YH.Platform.Sequences.Aggregates.Sequence", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("ConcurrencyStamp")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Delimiter")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("ResetterTypeId");

                    b.Property<int>("Step");

                    b.HasKey("Id");

                    b.ToTable("Base_Sequence");
                });

            modelBuilder.Entity("YH.Platform.Sequences.Aggregates.SequenceCurrent", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("ConcurrencyStamp")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("CurrentCode")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("CurrentNo");

                    b.Property<string>("CurrentReset")
                        .HasMaxLength(32);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.ToTable("Base_SequenceCurrent");
                });

            modelBuilder.Entity("YH.Platform.Sequences.Aggregates.SequenceSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("Order");

                    b.Property<string>("PaddingChar")
                        .HasMaxLength(1);

                    b.Property<int>("PaddingSide");

                    b.Property<int>("PaddingWidth");

                    b.Property<string>("RuleValue")
                        .HasMaxLength(64);

                    b.Property<int>("RulerTypeId");

                    b.Property<string>("SequenceId")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("SequenceId", "Order")
                        .IsUnique();

                    b.ToTable("Base_SequenceSetting");
                });

            modelBuilder.Entity("YH.Platform.UserManagement.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(64);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLockoutEnabled");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<bool>("IsTwoFactorEnabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<bool>("NeedToChangeThePassword");

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32);

                    b.Property<Guid?>("ProfilePictureId")
                        .HasMaxLength(128);

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128);

                    b.Property<string>("SignInToken");

                    b.Property<DateTime?>("SignInTokenExpireTimeUtc");

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("Abp_User");
                });

            modelBuilder.Entity("YH.Platform.Editions.SubscribableEdition", b =>
                {
                    b.HasBaseType("Abp.Application.Editions.Edition");

                    b.Property<decimal?>("AnnualPrice");

                    b.Property<int?>("ExpiringEditionId");

                    b.Property<decimal?>("MonthlyPrice");

                    b.Property<int?>("TrialDayCount");

                    b.Property<int?>("WaitingDayAfterExpire");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator().HasValue("SubscribableEdition");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("Abp_Features");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("Abp_Features");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Abp_Permissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Abp_Permissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("YH.Platform.Authorization.Roles.Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("YH.Platform.UserManagement.Users.User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("YH.Platform.UserManagement.Users.User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("YH.Platform.UserManagement.Users.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("YH.Platform.UserManagement.Users.User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("YH.Platform.UserManagement.Users.User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet")
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange")
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Erp.Mdm.MessagePartners.Aggregates.PartnerMessage", b =>
                {
                    b.OwnsOne("Erp.Mdm.BaseEntities.ValueObjects.ExceptionInfo", "ExceptionInfo", b1 =>
                        {
                            b1.Property<Guid>("PartnerMessageId");

                            b1.Property<string>("ExceptionDetail")
                                .HasColumnName("ExceptionDetail")
                                .HasMaxLength(1024);

                            b1.Property<string>("ExceptionMessage")
                                .HasColumnName("ExceptionMessage")
                                .HasMaxLength(128);

                            b1.Property<bool>("HasException")
                                .HasColumnName("HasException");

                            b1.HasKey("PartnerMessageId");

                            b1.ToTable("Mds_Message_Partner");

                            b1.HasOne("Erp.Mdm.MessagePartners.Aggregates.PartnerMessage")
                                .WithOne("ExceptionInfo")
                                .HasForeignKey("Erp.Mdm.BaseEntities.ValueObjects.ExceptionInfo", "PartnerMessageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Erp.Mdm.MessageSources.Aggregates.SourceMessage", b =>
                {
                    b.OwnsOne("Erp.Mdm.BaseEntities.ValueObjects.SourceMessageValueObject", "SourceMessageVo", b1 =>
                        {
                            b1.Property<Guid>("SourceMessageId");

                            b1.Property<string>("ClientIpAddress")
                                .HasColumnName("ClientIpAddress")
                                .HasMaxLength(128);

                            b1.Property<string>("ComputerName")
                                .HasColumnName("ComputerName")
                                .HasMaxLength(128);

                            b1.Property<string>("Data")
                                .IsRequired()
                                .HasColumnName("Data")
                                .HasMaxLength(4096);

                            b1.Property<string>("Md5")
                                .IsRequired()
                                .HasColumnName("Md5")
                                .HasMaxLength(32);

                            b1.Property<string>("TraceIdentifier")
                                .HasColumnName("TraceIdentifier")
                                .HasMaxLength(128);

                            b1.Property<Guid>("UpstreamMessageId")
                                .HasColumnName("UpstreamMessageId");

                            b1.HasKey("SourceMessageId");

                            b1.HasIndex("TraceIdentifier", "UpstreamMessageId");

                            b1.ToTable("Mds_Message_Source");

                            b1.HasOne("Erp.Mdm.MessageSources.Aggregates.SourceMessage")
                                .WithOne("SourceMessageVo")
                                .HasForeignKey("Erp.Mdm.BaseEntities.ValueObjects.SourceMessageValueObject", "SourceMessageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Erp.Mdm.BaseEntities.ValueObjects.ExceptionInfo", "ExceptionInfo", b1 =>
                        {
                            b1.Property<Guid>("SourceMessageId");

                            b1.Property<string>("ExceptionDetail")
                                .HasColumnName("ExceptionDetail")
                                .HasMaxLength(1024);

                            b1.Property<string>("ExceptionMessage")
                                .HasColumnName("ExceptionMessage")
                                .HasMaxLength(128);

                            b1.Property<bool>("HasException")
                                .HasColumnName("HasException");

                            b1.HasKey("SourceMessageId");

                            b1.ToTable("Mds_Message_Source");

                            b1.HasOne("Erp.Mdm.MessageSources.Aggregates.SourceMessage")
                                .WithOne("ExceptionInfo")
                                .HasForeignKey("Erp.Mdm.BaseEntities.ValueObjects.ExceptionInfo", "SourceMessageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Erp.Mdm.MessageStandards.Aggregates.StandardMessage", b =>
                {
                    b.OwnsOne("Erp.Mdm.BaseEntities.ValueObjects.ExceptionInfo", "ExceptionInfo", b1 =>
                        {
                            b1.Property<Guid>("StandardMessageId");

                            b1.Property<string>("ExceptionDetail")
                                .HasColumnName("ExceptionDetail")
                                .HasMaxLength(1024);

                            b1.Property<string>("ExceptionMessage")
                                .HasColumnName("ExceptionMessage")
                                .HasMaxLength(128);

                            b1.Property<bool>("HasException")
                                .HasColumnName("HasException");

                            b1.HasKey("StandardMessageId");

                            b1.ToTable("Mds_Message_Standard");

                            b1.HasOne("Erp.Mdm.MessageStandards.Aggregates.StandardMessage")
                                .WithOne("ExceptionInfo")
                                .HasForeignKey("Erp.Mdm.BaseEntities.ValueObjects.ExceptionInfo", "StandardMessageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Erp.Mdm.MessageSuppliers.Aggregates.SupplierMessage", b =>
                {
                    b.OwnsOne("Erp.Mdm.BaseEntities.ValueObjects.SupplierMessageValueObject", "SupplierMessageVo", b1 =>
                        {
                            b1.Property<Guid>("SupplierMessageId");

                            b1.Property<string>("Data")
                                .IsRequired()
                                .HasColumnName("Data")
                                .HasMaxLength(4096);

                            b1.Property<string>("EntityId")
                                .HasColumnName("EntityId")
                                .HasMaxLength(36);

                            b1.Property<DateTime>("EntityVersion")
                                .HasColumnName("EntityVersion");

                            b1.Property<string>("Md5")
                                .IsRequired()
                                .HasColumnName("Md5")
                                .HasMaxLength(32);

                            b1.Property<string>("SupplierDataTypeId")
                                .HasColumnName("SupplierDataTypeId")
                                .HasMaxLength(32);

                            b1.Property<string>("SupplierId")
                                .HasColumnName("SupplierId")
                                .HasMaxLength(32);

                            b1.Property<string>("TraceIdentifier")
                                .HasColumnName("TraceIdentifier")
                                .HasMaxLength(128);

                            b1.Property<Guid>("UpstreamMessageId")
                                .HasColumnName("UpstreamMessageId");

                            b1.HasKey("SupplierMessageId");

                            b1.HasIndex("TraceIdentifier", "UpstreamMessageId");

                            b1.HasIndex("SupplierId", "SupplierDataTypeId", "EntityId");

                            b1.ToTable("Mds_Message_Supplier");

                            b1.HasOne("Erp.Mdm.MessageSuppliers.Aggregates.SupplierMessage")
                                .WithOne("SupplierMessageVo")
                                .HasForeignKey("Erp.Mdm.BaseEntities.ValueObjects.SupplierMessageValueObject", "SupplierMessageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Erp.Mdm.BaseEntities.ValueObjects.ExceptionInfo", "ExceptionInfo", b1 =>
                        {
                            b1.Property<Guid>("SupplierMessageId");

                            b1.Property<string>("ExceptionDetail")
                                .HasColumnName("ExceptionDetail")
                                .HasMaxLength(1024);

                            b1.Property<string>("ExceptionMessage")
                                .HasColumnName("ExceptionMessage")
                                .HasMaxLength(128);

                            b1.Property<bool>("HasException")
                                .HasColumnName("HasException");

                            b1.HasKey("SupplierMessageId");

                            b1.ToTable("Mds_Message_Supplier");

                            b1.HasOne("Erp.Mdm.MessageSuppliers.Aggregates.SupplierMessage")
                                .WithOne("ExceptionInfo")
                                .HasForeignKey("Erp.Mdm.BaseEntities.ValueObjects.ExceptionInfo", "SupplierMessageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Erp.Mdm.PartnerDefiners.Aggregates.PartnerSubscription", b =>
                {
                    b.HasOne("Erp.Mdm.PartnerDefiners.Aggregates.Partner")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Erp.Mdm.StandardDefiners.Aggregates.StandardProperty", b =>
                {
                    b.HasOne("Erp.Mdm.StandardDefiners.Aggregates.StandardObject")
                        .WithMany("Properties")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Erp.Mdm.StandardMapperDefiners.Aggregates.StandardMapperDetail", b =>
                {
                    b.HasOne("Erp.Mdm.StandardMapperDefiners.Aggregates.StandardMapper")
                        .WithMany("Details")
                        .HasForeignKey("StandardMapperId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("YH.Platform.Authorization.Roles.Role", b =>
                {
                    b.HasOne("YH.Platform.UserManagement.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("YH.Platform.UserManagement.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("YH.Platform.UserManagement.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("YH.Platform.CustomDictionaries.Aggregates.DicDetail", b =>
                {
                    b.HasOne("YH.Platform.CustomDictionaries.Aggregates.Dic")
                        .WithMany("Details")
                        .HasForeignKey("DicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("YH.Platform.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("YH.Platform.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("YH.Platform.UserManagement.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("YH.Platform.UserManagement.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("YH.Platform.UserManagement.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("YH.Platform.Sequences.Aggregates.SequenceSetting", b =>
                {
                    b.HasOne("YH.Platform.Sequences.Aggregates.Sequence")
                        .WithMany("Settings")
                        .HasForeignKey("SequenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("YH.Platform.UserManagement.Users.User", b =>
                {
                    b.HasOne("YH.Platform.UserManagement.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("YH.Platform.UserManagement.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("YH.Platform.UserManagement.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("YH.Platform.Authorization.Roles.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("YH.Platform.UserManagement.Users.User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
